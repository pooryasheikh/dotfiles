#!/bin/bash

# Usage help
usage() {
    echo "Usage: $0 [-e|-d] -f <secret-file.yaml>"
    echo "  -e    Encode
    echo "  -d    Decode
    exit 1
}

# Check if a command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Check for required tools
check_dependencies() {
    local missing=()
    if ! command_exists yq; then
        missing+=("yq (https://github.com/mikefarah/yq)")
    fi
    if ! command_exists sops; then
        missing+=("sops (https://github.com/getsops/sops)")
    fi

    if [ ${#missing[@]} -gt 0 ]; then
        echo "Error: Missing required tools:"
        for tool in "${missing[@]}"; do
            echo "  - $tool"
        done
        exit 1
    fi
}

# Prompt user for secret details and create file
create_secret_file() {
    local file="$1"
    echo "File '$file' not found. Let's create a new secret!"

    read -p "Enter secret name (e.g., 'my-secret'): " secret_name
    read -p "Enter namespace (leave empty for none): " namespace

    # Initialize YAML structure
    echo "apiVersion: v1" > "$file"
    echo "kind: Secret" >> "$file"
    echo "metadata:" >> "$file"
    echo "  name: $secret_name" >> "$file"
    if [ -n "$namespace" ]; then
        echo "  namespace: $namespace" >> "$file"
    fi
    echo "data: {}" >> "$file"

    # Add key-value pairs
    while true; do
        read -p "Enter a key (or press Enter to finish): " key
        if [ -z "$key" ]; then
            break
        fi
        read -p "Enter value for '$key': " value
        yq eval ".data.$key = \"$value\"" -i "$file"
    done

    echo "Secret file '$file' created!"
}

# Process YAML
process_yaml() {
    local mode="$1"
    local file="$2"
    if [[ "$mode" == "-e" ]]; then
        # Encode
        sops -e --in-place "$file" || { echo "SOPS encryption failed"; exit 1; }
        yq eval '.data |= with_entries(.value |= @base64)' "$file" -i || { echo "yq encoding failed"; exit 1; }
    elif [[ "$mode" == "-d" ]]; then
        # Decode
        yq eval '.data |= with_entries(.value |= @base64d)' "$file" -i || { echo "yq decoding failed"; exit 1; }
        sops -d --in-place "$file" || { echo "SOPS decryption failed"; exit 1; }
    fi
}

# --- Main Script Logic ---
check_dependencies

# Check arguments
if [ "$#" -ne 3 ] || ( [ "$1" != "-e" ] && [ "$1" != "-d" ] ); then
    usage
fi

MODE="$1"
FILE="$3"

# If file doesn't exist, create it interactively
if [ ! -f "$FILE" ]; then
    create_secret_file "$FILE"
fi

# Process YAML
process_yaml "$MODE" "$FILE"

echo "Done! Updated '$FILE'."
